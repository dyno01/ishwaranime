name: Dartotsu Build Workflow
on:
  push:
    branches:
      - main

jobs:
  build_android:
    runs-on: ubuntu-latest
    # Only run if commit message contains [build.apk]
    if: contains(github.event.head_commit.message, '[build.apk]') || contains(github.event.head_commit.message, '[build]') || contains(github.event.head_commit.message, '[build.all]')
    outputs:
      apk_link: ${{steps.gdriveUpload_arm64.outputs.web-content-link}}

    permissions:
      contents: write
      pull-requests: read
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Cache Flutter dependencies
      - uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            build/
            .dart_tool/
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      # Cache Gradle dependencies
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      # Setup Cmake
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.18.1'
      # Install Ninaja
      - name: Install system dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ninja-build
      # Create symlink for ninja
      - name: Create symlink for ninja
        run: |
          mkdir -p /usr/local/lib/android/sdk/cmake/3.18.1/bin
          sudo ln -s /usr/bin/ninja /usr/local/lib/android/sdk/cmake/3.18.1/bin/ninja
        

      - uses: actions/setup-java@v4
        with:
          distribution: "oracle"
          java-version: "17"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.32.1
          cache: true

          # Download the keystore file (from GitHub Secrets or other storage)
      - name: Download keystore
        env:
          KEYSTORE_BASE64: ${{ secrets.APK_SIGN }}
        run: echo "$KEYSTORE_BASE64" | base64 --decode > android/app/dartotsu.jks

      # Set up environment variables for signing
      - name: Set up signing variables
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS}}
        run: |
          echo "storePassword=$KEYSTORE_PASSWORD" > android/key.properties
          echo "keyPassword=$KEY_PASSWORD" >> android/key.properties
          echo "keyAlias=$KEY_ALIAS" >> android/key.properties
          echo "storeFile=dartotsu.jks" >> android/key.properties
      # Create .env:
      - name: Setup env File
        env:
          SIMKL_SECRET: ${{ secrets.SIMKL_SECRET }}
        run: |
          echo "SIMKL_SECRET= $SIMKL_SECRET" > .env

      # Configure Gradle for faster builds
      - name: Configure Gradle
        run: |
          mkdir -p ~/.gradle
          echo "org.gradle.daemon=true" >> ~/.gradle/gradle.properties
          echo "org.gradle.parallel=true" >> ~/.gradle/gradle.properties
          echo "org.gradle.caching=true" >> ~/.gradle/gradle.properties

      # Optimize Flutter build
      - run: flutter clean
      - run: flutter pub get
      - run: flutter build apk --release --split-per-abi
      - run: flutter build apk --release

      - name: Rename APKs
        run: |
          for file in build/app/outputs/flutter-apk/app-*-release.apk; do
            abi=$(basename $file | sed 's/app-\(.*\)-release.apk/\1/')
            mv $file build/app/outputs/flutter-apk/Dartotsu_Android_${abi}_${{github.ref_name}}.apk
          done
          ls build/app/outputs/flutter-apk

      - name: Rename universal APK
        run: mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/Dantotsu_Android_universal_${{github.ref_name}}.apk

      - name: Upload arm64 File To Google Drive
        id: gdriveUpload_arm64
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/app/outputs/flutter-apk/Dartotsu_Android_arm64-v8a_main.apk
          upload-name: Dartotsu_Android_arm64-v8a_${{github.ref_name}}.apk
          upload-to-folder-id: ${{secrets.GOOGLE_FOLDER_ANDROID}}
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true
      - name: Upload armeabi File To Google Drive
        id: gdriveUpload_armeabi
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/app/outputs/flutter-apk/Dartotsu_Android_armeabi-v7a_main.apk
          upload-name: Dartotsu_Android_armeabi-v7a_${{github.ref_name}}.apk
          upload-to-folder-id: ${{secrets.GOOGLE_FOLDER_ANDROID}}
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true
      - name: Upload x86 File To Google Drive
        id: gdriveUpload_x86
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/app/outputs/flutter-apk/Dartotsu_Android_x86_64_main.apk
          upload-name: Dartotsu_Android_x86_64_${{github.ref_name}}.apk
          upload-to-folder-id: ${{secrets.GOOGLE_FOLDER_ANDROID}}
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true
      - name: Upload File To Google Drive
        id: gdriveUpload_universal
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/app/outputs/flutter-apk/Dantotsu_Android_universal_${{github.ref_name}}.apk
          upload-name: Dartotsu.apk
          upload-to-folder-id: ${{secrets.GOOGLE_FOLDER_ANDROID}}
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true
  build_windows:
    runs-on: windows-latest
    if: contains(github.event.head_commit.message, '[build.windows]') ||  contains(github.event.head_commit.message, '[build]')  ||  contains(github.event.head_commit.message, '[build.all]')
    outputs:
      zip_link: ${{steps.gdriveUpload.outputs.web-content-link}}

    permissions:
      contents: write
      pull-requests: write
      repository-projects: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Signing Tool
        run: |
          mkdir $env:USERPROFILE\certs
          [System.IO.File]::WriteAllBytes("$env:USERPROFILE\certs\Dartotsu.pfx", [Convert]::FromBase64String("${{secrets.PFX_FILE}}"))
      # Create .env:
      - name: Setup env File
        env:
          SIMKL_SECRET: ${{ secrets.SIMKL_SECRET }}
        run: |
          echo "SIMKL_SECRET= $env:SIMKL_SECRET" > .env

      # Setup Flutter with caching
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.32.1
          cache: true
      - name: Setup NuGet.exe for use with actions
        uses: NuGet/setup-nuget@v2.0.1
        with:
          nuget-version: 'latest'
      # Enable Windows desktop support
      - name: Enable Windows desktop support
        run: flutter config --enable-windows-desktop

      - run: flutter clean

      # Get dependencies with cached packages
      - run: flutter pub get

      - name: Extract Version
        id: get_version
        run: |
          $version = (Get-Content pubspec.yaml | Select-String -Pattern 'version: ([\d.]+)').Matches.Groups[1].Value
          echo "version=$version" >> $env:GITHUB_ENV

      - name: Build and Sign Setup
        run: |
          dart run inno_bundle:build --sign-tool-params '"C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe" sign /fd sha256 /f "C:\Users\runneradmin\certs\Dartotsu.pfx" /p "${{secrets.PFX_PASSWORD}}" /t http://timestamp.digicert.com /v $f' --release


      # Upload to Google Drive
      - name: Upload File To Google Drive
        id: gdriveUpload
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build\windows\x64\installer\Release\Dartotsu-x86_64-${{env.version}}-Installer.exe
          upload-name: Dartotsu_windows.exe
          upload-to-folder-id: ${{secrets.GOOGLE_FOLDER_MAIN}}
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true
          
  build_linux:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[build.linux]')  ||  contains(github.event.head_commit.message, '[build.all]')
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    outputs:
      zip_link: ${{steps.gdriveUpload.outputs.web-content-link}}
      appImage_link: ${{steps.gdriveUpload_appImage.outputs.web-content-link}}
    steps:
      # Step 1: Clone repository
      - name: Cloning repository
        uses: actions/checkout@v4

      # Step 2: Setup Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.32.1
          cache: true

      # Step 3: Setup system dependencies
      - name: Install system dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ninja-build libgtk-3-dev webkit2gtk-4.1 libmpv-dev pkg-config fuse
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/latest/download/appimagetool-x86_64.AppImage"
          chmod +x appimagetool
          sudo mv appimagetool /usr/local/bin/

      # Step 4: Cache Flutter dependencies
      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            build/
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-
      # Create .env:
      - name: Setup env File
        env:
          SIMKL_SECRET: ${{ secrets.SIMKL_SECRET }}
        run: |
          echo "SIMKL_SECRET= $SIMKL_SECRET" > .env

      # Step 5: Fetch Flutter dependencies
      - name: Fetch Flutter dependencies
        run: flutter pub get

      # Step 6: Build the Linux application
      - name: Build Flutter Linux app
        run: flutter build linux
      

      - name: Create AppImage
        run: |
          # Create fresh AppDir structure
          rm -rf AppDir
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          # Copy built files
          cp -r build/linux/x64/release/bundle/* AppDir/usr/bin/
          cp assets/images/logo.png AppDir/usr/share/icons/hicolor/256x256/apps/dartotsu.png
          cp assets/images/logo.png AppDir/dartotsu.png
          # Create desktop file in AppDir root
          cat <<EOF > AppDir/dartotsu.desktop
          [Desktop Entry]
          Name=Dartotsu
          Exec=usr/bin/dartotsu
          Icon=assests/images/logo.png
          Type=Application
          Categories=Utility;
          EOF
          # Create AppRun file
          cat <<EOF > AppDir/AppRun
          #!/bin/sh
          SELF=\$(readlink -f "\$0")
          HERE=\${SELF%/*}
          export PATH="\${HERE}/usr/bin/:\${PATH}"
          export LD_LIBRARY_PATH="\${HERE}/usr/lib/:\${LD_LIBRARY_PATH}"
          exec "\${HERE}/usr/bin/dartotsu" "\$@"
          EOF
          chmod +x AppDir/AppRun
          # Make AppImage
          /usr/local/bin/appimagetool AppDir
          mv Dartotsu-x86_64.AppImage build/linux/x64/release/Dartotsu-Linux.AppImage

          ls build/linux/x64/release

      # Step 7: Archive the app
      - name: Archive app
        uses: thedoctor0/zip-release@master
        with:
          type: "zip"
          filename: Dartotsu_Linux_${{github.ref_name}}.zip
          directory: build/linux/x64/release/bundle

      # Step 9: Upload to Google Drive
      - name: Upload File To Google Drive
        id: gdriveUpload
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/linux/x64/release/bundle/Dartotsu_Linux_${{github.ref_name}}.zip
          upload-name: Dartotsu_linux.zip
          upload-to-folder-id: ${{secrets.GOOGLE_FOLDER_MAIN}}
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true
      # Step 9: Upload to Google Drive
      - name: Upload File To Google Drive
        id: gdriveUpload_appImage
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/linux/x64/release/Dartotsu-Linux.AppImage
          upload-name: Dartotsu_Linux.AppImage
          upload-to-folder-id: ${{secrets.GOOGLE_FOLDER_MAIN}}
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true

  build_ios:
    runs-on: macos-latest
    if: contains(github.event.head_commit.message, '[build.ios]')  ||  contains(github.event.head_commit.message, '[build.all]')
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    outputs:
      ipa_link: ${{steps.gdriveUpload.outputs.web-content-link}}
    steps:
      # Step 1: Clone repository
      - name: Cloning repository
        uses: actions/checkout@v4

      # Step 2: Setup Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.32.1
          cache: true
      
      - name: Setup .env File for macOS
        env:
          SIMKL_SECRET: ${{ secrets.SIMKL_SECRET }}
        run: |
          echo "SIMKL_SECRET= $SIMKL_SECRET" > .env
        shell: bash
        

      # Step 3 Get Dependencies
      - name: Get Dependencies
        run: flutter pub get
      #Step 4 Build app for iOS
      - name: Build iOS
        run: |
          flutter build ios --release --no-codesign
          cd build/ios/iphoneos
          mkdir -p Payload
          cd Payload
          ln -s ../Runner.app
          cd ..
          zip -r Dartotsu-iOS-${{ github.ref_name }}.ipa Payload
      #Step 5 Upload ipa file to google drive
      - name: Upload File To Google Drive
        id: gdriveUpload
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/ios/iphoneos/Dartotsu-iOS-main.ipa
          upload-name: Dartotsu-iOS-main.ipa
          upload-to-folder-id: ${{secrets.GOOGLE_FOLDER_MAIN}}
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true
  build_macos:
    runs-on: macos-latest
    if: contains(github.event.head_commit.message, '[build.macos]') ||  contains(github.event.head_commit.message, '[build.all]')
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    outputs:
      deb_link: ${{steps.gdriveUpload.outputs.web-content-link}}
    steps:
      - name: Cloning repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.32.1
          cache: true
      - name: Setup .env File for macOS
        env:
          SIMKL_SECRET: ${{ secrets.SIMKL_SECRET }}
        run: |
          echo "SIMKL_SECRET= $SIMKL_SECRET" > .env
        shell: bash
      - name: Get Dependencies
        run: flutter pub get
      - name: Build macOS
        run: flutter build macos --release
      - name: Create DMG file for macOS Build
        run: |
          mkdir -p build/macos/Release
          hdiutil create -volname "Dartotsu" -srcfolder build/macos/Build/Products/Release/Dartotsu.app -ov -format UDZO build/macos/Release/Dartotsu-macos-${{github.ref_name}}.dmg
        shell: bash
      - name: Upload File To Google Drive
        id: gdriveUpload
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/macos/Release/Dartotsu-macos-${{github.ref_name}}.dmg
          upload-name: Dartotsu-macos-${{github.ref_name}}.dmg
          upload-to-folder-id: ${{secrets.GOOGLE_FOLDER_MAIN}}
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true
  sendMessage:
    runs-on: ubuntu-latest
    needs: [build_android, build_windows, build_linux, build_ios, build_macos]
    if: always()
    permissions:
      contents: read
      pull-requests: read
      actions: read
    steps:
      - name: Cloing repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download last SHA artifact
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: dart.yml
          name: last-sha
        continue-on-error: true

      - name: Get Commits Since Last Run
        run: |
          if [ -f last_sha.txt ]; then
            LAST_SHA=$(cat last_sha.txt)
          else
            # Fallback to first commit if no previous SHA available
            LAST_SHA=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "Commits since $LAST_SHA:"
          # Accumulate commit logs in a shell variable
          COMMIT_LOGS=$(git log $LAST_SHA..HEAD --pretty=format:"● %s ~%an [֍](https://github.com/${{ github.repository }}/commit/%H)" --max-count=10)
          # URL-encode the newline characters for GitHub Actions
          COMMIT_LOGS="${COMMIT_LOGS//'%'/'%25'}"
          COMMIT_LOGS="${COMMIT_LOGS//$'\n'/'%0A'}"
          COMMIT_LOGS="${COMMIT_LOGS//$'\r'/'%0D'}"
          # Append the encoded commit logs to the COMMIT_LOG environment variable
          echo "COMMIT_LOG=${COMMIT_LOGS}" >> $GITHUB_ENV
          # Debugging: Print the variable to check its content
          echo "$COMMIT_LOGS"
          echo "$COMMIT_LOGS" > commit_log.txt
          # Extract branch name from github.ref
          BRANCH=${{ github.ref }}
          BRANCH=${BRANCH#refs/heads/}
          echo "BRANCH=${BRANCH}" >> $GITHUB_ENV
        shell: /usr/bin/bash -e {0}
        env:
          CI: true
        continue-on-error: true

      - name: Save Current SHA for Next Run
        run: echo ${{ github.sha }} > last_sha.txt

      - name: Check for Ping
        id: check_noping
        run: |
          if [[ "${{ github.event.head_commit.message }}" == *"[Ping]"* ]]; then 
            echo "ping_variable=<@&1324799528255225997>" >> $GITHUB_ENV 
          else 
            echo "ping_variable=noPing" >> $GITHUB_ENV 
          fi
      - name: Upload APK to Discord and Telegram
        shell: bash
        run: |
          # Prepare Discord embed
          fetch_user_details() {
            local login=$1
            user_details=$(curl -s "https://api.github.com/users/$login")
            name=$(echo "$user_details" | jq -r '.name // .login')
            login=$(echo "$user_details" | jq -r '.login')
            avatar_url=$(echo "$user_details" | jq -r '.avatar_url')
            echo "$name|$login|$avatar_url"
          }

          # Additional information for the goats
          declare -A additional_info
          additional_info["ibo"]="\n Discord: <@951737931159187457>\n AniList: [takarealist112](<https://anilist.co/user/5790266/>)"
          additional_info["aayush262"]="\n Discord: <@918825160654598224>\n AniList: [aayush262](<https://anilist.co/user/5144645/>)"
          additional_info["Ankit Grai"]="\n Discord: <@1125628254330560623>\n AniList: [bheshnarayan](<https://anilist.co/user/6417303/>)\n X: [grayankit01](<https://x.com/grayankit01>)"
          # Decimal color codes for contributors
          declare -A contributor_colors
          default_color="#1ac4c5"
          contributor_colors["aayush262"]="#5d689d"
          contributor_colors["Sadwhy"]="#ff7e95"
          contributor_colors["grayankit"]="#c51aa1"
          contributor_colors["rebelonion"]="#d4e5ed"
          hex_to_decimal() { printf '%d' "0x${1#"#"}"; }

          # Count recent commits and create an associative array
          declare -A recent_commit_counts
          echo "Debug: Processing COMMIT_LOG:"
          echo "$COMMIT_LOG"
          while read -r count name; do
              recent_commit_counts["$name"]=$count
              echo "Debug: Commit count for $name: $count"
          done < <(echo "$COMMIT_LOG" | sed 's/%0A/\n/g' | grep -oP '(?<=~)[^[]*' | sort | uniq -c | sort -rn)

          echo "Debug: Fetching contributors from GitHub"
          # Fetch contributors from GitHub
          contributors=$(curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{secrets.FINE_GRAIN_TOKEN}}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{github.repository}}/contributors)
          echo "Debug: Contributors response:"
          echo "$contributors"

          # Create a sorted list of contributors based on recent commit counts
          sorted_contributors=$(for login in $(echo "$contributors" | jq -r '.[].login'); do
              user_info=$(fetch_user_details "$login")
              name=$(echo "$user_info" | cut -d'|' -f1)
              count=${recent_commit_counts["$name"]:-0}
              echo "$count|$login"
          done | sort -rn | cut -d'|' -f2)

          # Initialize needed variables
          developers=""
          committers_count=0
          max_commits=0
          top_contributor=""
          top_contributor_count=0
          top_contributor_avatar=""
          embed_color=$(hex_to_decimal "$default_color")

          # Process contributors in the new order
          while read -r login; do
            user_info=$(fetch_user_details "$login")
            name=$(echo "$user_info" | cut -d'|' -f1)
            login=$(echo "$user_info" | cut -d'|' -f2)
            avatar_url=$(echo "$user_info" | cut -d'|' -f3)

          # Only process if they have recent commits
          commit_count=${recent_commit_counts["$name"]:-0}
          if [ $commit_count -gt 0 ]; then
            # Update top contributor information
            if [ $commit_count -gt $max_commits ]; then
              max_commits=$commit_count
              top_contributors=("$login")
              top_contributor_count=1
              top_contributor_avatar="$avatar_url"
              embed_color=$(hex_to_decimal "${contributor_colors[$name]:-$default_color}")
            elif [ $commit_count -eq $max_commits ]; then
              top_contributors+=("$login")
              top_contributor_count=$((top_contributor_count + 1))
              embed_color=$(hex_to_decimal "$default_color")
            fi
            echo "Debug top contributors:"
            echo "$top_contributors"


            # Get commit count for this contributor on the main branch
            branch_commit_count=$(git log --author="$login" --author="$name" --oneline | awk '!seen[$0]++' | wc -l)

            # Debug: Print recent_commit_counts
            echo "Debug: recent_commit_counts contents:"
            for key in "${!recent_commit_counts[@]}"; do
              echo "$key: ${recent_commit_counts[$key]}"
            done

            extra_info="${additional_info[$name]}"
            if [ -n "$extra_info" ]; then
              extra_info=$(echo "$extra_info" | sed 's/\\n/\n- /g')
            fi

            # Construct the developer entry
            developer_entry="◗ **${name}** ${extra_info}
          - Github: [${login}](https://github.com/${login})
          - Commits: ${branch_commit_count}"



            # Add the entry to developers, with a newline if it's not the first entry
            if [ -n "$developers" ]; then
              developers="${developers}
          ${developer_entry}"
              else
                developers="${developer_entry}"
              fi
              committers_count=$((committers_count + 1))
            fi
          done <<< "$sorted_contributors"

          # Set the thumbnail URL and color based on top contributor(s)
          if [ $top_contributor_count -eq 1 ]; then
            thumbnail_url="$top_contributor_avatar"
          else
            thumbnail_url="https://i.imgur.com/qt1ixRk.gif"
            embed_color=$(hex_to_decimal "$default_color")
          fi

          # Truncate field values
          max_length=1000
          commit_messages=$(echo "$COMMIT_LOG" | sed 's/%0A/\n/g; s/^/\n/')
          if [ ${#developers} -gt $max_length ]; then
            developers="${developers:0:$max_length}... (truncated)"
          fi
          if [ ${#commit_messages} -gt $max_length ]; then
            commit_messages="${commit_messages:0:$max_length}... (truncated)"
          fi
          # Construct Discord payload
          discord_data=$(jq -nc \
                        --arg field_value "$commit_messages" \
                        --arg author_value "$developers" \
                        --arg footer_text "Version $VERSION" \
                        --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)" \
                        --arg thumbnail_url "$thumbnail_url" \
                        --arg embed_color "$embed_color" \
                        '{
                          "content": "${{env.ping_variable}}",
                          "embeds": [
                            {
                              "title": "New Alpha-Build dropped 🔥",
                              "color": $embed_color,
                              "fields": [
                                {
                                  "name": "Commits:",
                                  "value": $field_value,
                                  "inline": true
                                },
                                {
                                  "name": "Developers:",
                                  "value": $author_value,
                                  "inline": false
                                }
                              ],
                              "footer": {
                                "text": $footer_text
                              },
                              "timestamp": $timestamp,
                              "thumbnail": {
                                "url": $thumbnail_url
                              }
                            }
                          ],
                          "attachments": []
                        }')
          echo "Debug: Final Discord payload is:"
          echo "$discord_data"
          # Send Discord message
          curl -H "Content-Type: application/json" \
              -d "$discord_data" \
              ${{ secrets.DISCORD_WEBHOOK_URL }}

          # Format commit messages for Telegram
          telegram_commit_messages=$(echo "$COMMIT_LOG" | sed 's/%0A/\n/g' | while read -r line; do
              message=$(echo "$line" | sed -E 's/● (.*) ~(.*) \[֍\]\((.*)\)/● \1 ~\2 <a href="\3">֍<\/a>/')
              message=$(echo "$message" | sed -E 's/\[#([0-9]+)\]\((https:\/\/github\.com\/[^)]+)\)/<a href="\2">#\1<\/a>/g')
              echo "$message"
          done)
          telegram_commit_messages="<blockquote>${telegram_commit_messages}</blockquote>"
          echo "$telegram_commit_messages"

          # Configuring dev info
          echo "$developers" > dev_info.txt
          # making the file executable
          chmod +x scripts/tel_parser.sed
          ./scripts/tel_parser.sed dev_info.txt >> output.txt
          dev_info_tel=$(< output.txt)

          telegram_dev_info="<blockquote>${dev_info_tel}</blockquote>"
          echo "$telegram_dev_info"


          # Upload APK to Telegram
          response=$(curl -sS -f -X POST \
              "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKKEN}}/sendDocument" \
              -F "chat_id=${{ secrets.TELEGRAM_CHANNEL_ID}}" \
              -F "message_thread_id=${{secrets.TELEGRAM_THREAD_ID}}" \
              -F "document=@last_sha.txt" \
              -F "caption=New Alpha-Build dropped 🔥

          Commits:
          ${telegram_commit_messages}
          Devs:
          ${telegram_dev_info}
          version: ${VERSION}" \
              -F "parse_mode=HTML")

      - name: Upload Current SHA as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: last-sha
          path: last_sha.txt
      - name: Send Discord Notification with Download Links
        env:
          APK_DOWNLOAD_LINK: ${{ needs.build_android.outputs.apk_link }}
          WINDOWS_DOWNLOAD_LINK: ${{ needs.build_windows.outputs.zip_link }}
          LINUX_DOWNLOAD_LINK: ${{needs.build_linux.outputs.zip_link}}
          LINUX_APPIMAGE_DOWNLOAD_LINK: ${{needs.build_linux.outputs.appImage_link}}
          IOS_DOWNLOAD_LINK: ${{needs.build_ios.outputs.ipa_link}}
          MACOS_DOWNLOAD_LINK: ${{needs.build_macos.outputs.deb_link}}
        run: |
          # Check if APK_DOWNLOAD_LINK is not empty
          if [[ -n "$APK_DOWNLOAD_LINK" ]]; then
            APK_MESSAGE="[Download APK](https://drive.google.com/drive/folders/1S4QzdKz7ZofhiF5GAvjMdBvYK7YhndKM)"
          else
            APK_MESSAGE=""
          fi

          # Check if WINDOWS_DOWNLOAD_LINK is not empty
          if [[ -n "$WINDOWS_DOWNLOAD_LINK" ]]; then
            WINDOWS_MESSAGE="[Download Windows Installer]($WINDOWS_DOWNLOAD_LINK)"
          else
            WINDOWS_MESSAGE=""
          fi

          # Check if LINUX_DOWNLOAD_LINK is not empty
          if [[ -n "$LINUX_DOWNLOAD_LINK" ]]; then
            LINUX_MESSAGE="[Download LINUX ZIP]($LINUX_DOWNLOAD_LINK)"
          else
            LINUX_MESSAGE=""
          fi
          # Check if LINUX_APPIMAGE_DOWNLOAD_LINK is not empty
          if [[ -n "$LINUX_APPIMAGE_DOWNLOAD_LINK" ]]; then
            LINUX_APPIMAGE_MESSAGE="[Download LINUX AppImage]($LINUX_APPIMAGE_DOWNLOAD_LINK)"
          else
            LINUX_APPIMAGE_MESSAGE=""
          fi

          # Check if IOS_DOWNLOAD_LINK is not empty
          if [[ -n "$IOS_DOWNLOAD_LINK" ]]; then
            IOS_MESSAGE="[Download IOS IPA]($IOS_DOWNLOAD_LINK)"
          else
            IOS_MESSAGE=""
          fi

          # Check if MACOS_DOWNLOAD_LINK is not empty
          if [[ -n "$MACOS_DOWNLOAD_LINK" ]]; then
            MACOS_MESSAGE="[Download macos deb]($MACOS_DOWNLOAD_LINK)"
          else
            MACOS_MESSAGE=""
          fi

            echo "apk_message=$APK_MESSAGE" >> $GITHUB_ENV
            echo "windows_message=$WINDOWS_MESSAGE" >> $GITHUB_ENV
            echo "linux_message=$LINUX_MESSAGE" >> $GITHUB_ENV
            echo "linux_appImage_message=$LINUX_APPIMAGE_MESSAGE" >> $GITHUB_ENV
            echo "ios_message=$IOS_MESSAGE" >> $GITHUB_ENV
            echo "macos_message=$MACOS_MESSAGE" >> $GITHUB_ENV

          # Prepare and send the Discord message
          curl -H "Content-Type: application/json" \
               -d "{\"content\": \"${APK_MESSAGE}\n${WINDOWS_MESSAGE}\n${LINUX_MESSAGE}\n${LINUX_APPIMAGE_MESSAGE}\n${IOS_MESSAGE}\n${MACOS_MESSAGE}\"}" \
               "${{ secrets.DISCORD_WEBHOOK_URL }}"
      - name: Send Telegram Notification
        run: |
          response=$(curl -sS -f -X POST \
              "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKKEN}}/sendMessage" \
              -F "chat_id=${{ secrets.TELEGRAM_CHANNEL_ID}}" \
              -F "message_thread_id=${{secrets.TELEGRAM_THREAD_ID}}" \
              -F parse_mode="Markdown" \
              -F disable_notification=true \
              -F "text=🎉 *Build Notification* 🎉
            ${{ env.apk_message }}
            ${{ env.windows_message }}
            ${{ env.linux_message }}
            ${{env.linux_appImage_message}}
            ${{ env.ios_message }}
            ${{ env.macos_message }}")
